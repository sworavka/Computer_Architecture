$date
	Thu Nov  7 17:32:34 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALUTest_v $end
$var wire 1 ! Zero $end
$var wire 64 " BusW [63:0] $end
$var reg 4 # ALUCtrl [3:0] $end
$var reg 64 $ BusA [63:0] $end
$var reg 64 % BusB [63:0] $end
$var reg 8 & passed [7:0] $end
$scope module uut $end
$var wire 4 ' ALUCtrl [3:0] $end
$var wire 64 ( BusA [63:0] $end
$var wire 64 ) BusB [63:0] $end
$var wire 1 ! Zero $end
$var parameter 32 * n $end
$var reg 64 + BusW [63:0] $end
$upscope $end
$scope task allPassed $end
$var reg 8 , numTests [7:0] $end
$var reg 8 - passed [7:0] $end
$upscope $end
$scope task passTest $end
$var reg 65 . actualOut [64:0] $end
$var reg 65 / expectedOut [64:0] $end
$var reg 8 0 passed [7:0] $end
$var reg 257 1 testType [256:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000000 *
$end
#0
$dumpvars
bx 1
bx 0
bx /
bx .
bx -
bx ,
b1000 +
b1000 )
b1000 (
b0 '
b0 &
b1000 %
b1000 $
b0 #
b1000 "
x!
$end
#1000
0!
#40000
b101 "
b101 +
b101 $
b101 (
b111 %
b111 )
b1 &
b1 0
b100000101001110010001000010000000110000011110000011100000101100001100000111100000111000 1
b1000 /
b1000 .
#80000
b0 "
b0 +
b1000 $
b1000 (
b0 %
b0 )
b10 &
b10 0
b100000101001110010001000010000000110000011110000011010100101100001100000111100000110111 1
b101 /
b101 .
#81000
1!
#120000
b0 $
b0 (
b1 #
b1 '
b11 &
b11 0
b100000101001110010001000010000000110000011110000011100000101100001100000111100000110000 1
b10000000000000000000000000000000000000000000000000000000000000000 /
b10000000000000000000000000000000000000000000000000000000000000000 .
#160000
b111 "
b111 +
b111 $
b111 (
b100 &
b100 0
b1001111010100100010000000110000011110000011000000101100001100000111100000110000 1
#161000
0!
#200000
b101 %
b101 )
b101 &
b101 0
b1001111010100100010000000110000011110000011011100101100001100000111100000110000 1
b111 /
b111 .
#240000
b0 "
b0 +
b0 $
b0 (
b0 %
b0 )
b10 #
b10 '
b110 &
b110 0
b1001111010100100010000000110000011110000011011100101100001100000111100000110101 1
#241000
1!
#280000
b1010 "
b1010 +
b101 $
b101 (
b101 %
b101 )
b111 &
b111 0
b100000101000100010001000010000000110000011110000011000000101100001100000111100000110000 1
b10000000000000000000000000000000000000000000000000000000000000000 /
b10000000000000000000000000000000000000000000000000000000000000000 .
#281000
0!
#320000
b111 $
b111 (
b11 %
b11 )
b1000 &
b1000 0
b100000101000100010001000010000000110000011110000011010100101100001100000111100000110101 1
b1010 /
b1010 .
#360000
b0 "
b0 +
b101 $
b101 (
b101 %
b101 )
b110 #
b110 '
b1001 &
b1001 0
b100000101000100010001000010000000110000011110000011011100101100001100000111100000110011 1
#361000
1!
#400000
b11 "
b11 +
b10 %
b10 )
b1010 &
b1010 0
b101001101010101010000100010000000110000011110000011010100101100001100000111100000110101 1
b10000000000000000000000000000000000000000000000000000000000000000 /
b10000000000000000000000000000000000000000000000000000000000000000 .
#401000
0!
#440000
b1011 $
b1011 (
b1000 %
b1000 )
b1011 &
b1011 0
b101001101010101010000100010000000110000011110000011010100101100001100000111100000110010 1
b11 /
b11 .
#480000
b0 "
b0 +
b0 $
b0 (
b0 %
b0 )
b111 #
b111 '
b1100 &
b1100 0
b101001101010101010000100010000000110000011110000100001000101100001100000111100000111000 1
#481000
1!
#520000
b1111 "
b1111 +
b1011 $
b1011 (
b1111 %
b1111 )
b1101 &
b1101 0
b10100000100000101010011010100110010000000110000011110000011000000101100001100000111100000110000 1
b10000000000000000000000000000000000000000000000000000000000000000 /
b10000000000000000000000000000000000000000000000000000000000000000 .
#521000
0!
#560000
b110 "
b110 +
b1000 $
b1000 (
b110 %
b110 )
b1110 &
b1110 0
b10100000100000101010011010100110010000000110000011110000100001000101100001100000111100001000110 1
b1111 /
b1111 .
#600000
b1111 ,
b1111 -
b1111 &
b1111 0
b10100000100000101010011010100110010000000110000011110000011100000101100001100000111100000110110 1
b110 /
b110 .
